// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static Array ram, freeList;
    static int NEXT, SIZE;

    /** Initializes the class. */
    function void init() {
        let ram = 0;
        let NEXT = 0;
        let SIZE = 1;

        let freeList = 2048;
        let freeList[NEXT] = null;
        let freeList[SIZE] = 16384 - 2048 - 2;
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var Array block, nextBlock, curBlock, prevBlock;
        var int nextBlockSize;

        let prevBlock = Memory.searchBlock(size);

        if (prevBlock = -1) {
            return -1;
        }

        if (prevBlock = null) {
            let curBlock = freeList;
        } else {
            let curBlock = prevBlock[NEXT];
        }
        let block = curBlock + 2;

        let nextBlockSize = curBlock[SIZE] - size - 2;
        if (nextBlockSize > 0) {
            let nextBlock = curBlock + size + 2;
            let nextBlock[NEXT] = curBlock[NEXT];
            let nextBlock[SIZE] = nextBlockSize;
        } else {
            let nextBlock = curBlock[NEXT];
        }
  
        let block[-1] = size;

        if (prevBlock = null) {
            let freeList = nextBlock;
        } else {
            let prevBlock[NEXT] = nextBlock;
        }

        return block;
    }

    function Array searchBlock(int size) {
        var Array curBlock, prevBlock;

        let curBlock = freeList;
        let prevBlock = null;

        while (~(curBlock = null)) {
            if (~(curBlock[SIZE] < size)) {
                return prevBlock;
            }
            let prevBlock = curBlock;
            let curBlock = curBlock[NEXT];
        }

        return -1;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        var Array nextBlock;

        let nextBlock = o - 2;
        let nextBlock[NEXT] = freeList;

        let freeList = nextBlock;

        return;
    }    
}
