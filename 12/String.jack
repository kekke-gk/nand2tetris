// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field Array s;
    field int curLen;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if (maxLength = 0) {
            let maxLength = 1;
        }
        let s = Array.new(maxLength);
        let curLen = 0;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do s.dispose();
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return curLen;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return s[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let s[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        let s[curLen] = c;
        let curLen = curLen + 1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if (curLen > 0) {
            let curLen = curLen - 1;
            let s[curLen] = 0;
        }
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int i, v, d, c;
        var boolean sign;

        let i = 0;
        let v = 0;
        let sign = true;

        while (i < length()) {
            let c = charAt(i);

            if (c = 45) {
                let sign = false;
            } else {
                let d = charAt(i) - 48;
                let v = v * 10 + d;
            }

            let i = i + 1;
        }

        if (sign) {
            return v;
        }
        return -v;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var int powerOfTen, q;
        var boolean flag;

        let powerOfTen = 10000; // Maximum in 16 bit is 65536. So start from 10000.
        let flag = false;

        let curLen = 0;

        if (val < 0) {
            do appendChar(45);
            let val = Math.abs(val);
        }

        while (powerOfTen > 0) {
            let q = val / powerOfTen;
            let val = val - (q * powerOfTen); // val %= powerOfTen;

            if (q = 0) {
                // Don't print prefix 0. (Don't do zero padding.)
                if (flag) {
                    do appendChar(q + 48);
                }
            } else {
                do appendChar(q + 48);
                let flag = true;
            }
            
            let powerOfTen = powerOfTen / 10;
        }
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
